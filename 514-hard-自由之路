class Solution:
    def findRotateSteps(self, ring, key):
        indexes, n, dp, pre = collections.defaultdict(list), len(ring), [0] * len(ring), key[0]
        for i, c in enumerate(ring):
            indexes[c].append(i)
        for i in indexes[key[0]]:
            dp[i] = min(i, n - i) + 1
        for c in key[1:]:
            for i in indexes[c]:
                dp[i] = min(dp[j] + min(i - j, j + n - i) if i >= j else dp[j] + min(j - i, i + n - j) for j in indexes[pre]) + 1
            pre = c
        return min(dp[i] for i in indexes[key[-1]])

# 有一个测试用例需要注意一下：
# Input: ring = "nyngl", key = "yyynnnnnnlllggg"
# 可以发现，打完y，再打n时，发现顺时针和逆时针都可以到n。选哪个呢？这时候需要根据之后的字母离得跟哪个n比较近来抉择。
# 一开始写的程序没有办法解决这个问题
# 就是下一步 顺时针逆时针都是可以的 但是之后的步数不同
# 一开始写的（小学生）错误代码==

class Solution:
    def findRotateSteps(self, ring: str, key: str) -> int:
        n = len(ring)
        count = 0
        for i in range(len(key)):
            count1 = ring.find(key[i])+1
            ring_reverse = ring[0]+ring[(n-1):0:-1]
            count2 = ring_reverse.find(key[i])+1
            if count1 > count2:
                count += count2
                ring = ring[(n-count2+1):]+ring[:(n-count2+1)]
            else:
                count += count1
                ring = ring[(count1-1):]+ring[:(count1-1)]
        return count
